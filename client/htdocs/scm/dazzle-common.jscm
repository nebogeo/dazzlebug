;; -*- mode: scheme; -*-
;; Dazzle Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; genetic programming stuff

(define pattern-complexity 6)
(define replicate-start 0)
(define num-replicates 4)
(define num-variations 8)

(define pattern-images
  (append
   (build-list 42 (lambda (i) (+ "themes/huge/" (+ i 1) ".png")))
   (map
    (lambda (s)
      (+ "themes/huge/" s))
    (foldl
     (lambda (colour r)
       (append
        r (foldl
           (lambda (scale r)
             (append
              r
              (list (string-append colour "-s" scale ".png"))
              (map
               (lambda (thresh)
                 (string-append colour "-s" scale "-t" thresh ".png"))
               (list "94" "160"))))
           () (list "8" "16" "32" "64"))))
     () (list "black" "white")))))

(define (transform x y r s) (list x y r s))

(define (transform-x t) (list-ref t 0))
(define (transform-y t) (list-ref t 1))
(define (transform-rotate t) (list-ref t 2))
(define (transform-scale t) (list-ref t 3))

(define (transform-mutate t r)
  (transform
   (modulo (+ (transform-x t) (* (rndf) 10 r)) 127)
   (modulo (+ (transform-y t) (* (rndf) 10 r)) 127)
   (+ (transform-rotate t) (* (rndf) r))
   1))

;; a terminal can either be an image with a transform or a flat colour
(define (make-terminal)
  (if (< (rndf) 0.5)
      (list
       "terminal"
       "image"
       (transform (random 127) (random 127) (* (rndf) 6.282) 1)
       (choose pattern-images))
      (list
       "terminal"
       "colour"
       (let ((v (random 246)))
         (list v v v (rndf))))))

(define (program-type t) (list-ref t 0))
(define (terminal-type t) (list-ref t 1))
(define (terminal-transform t) (list-ref t 2))
(define (terminal-colour t) (list-ref t 2))
(define (terminal-image t) (list-ref t 3))
(define (terminal-colour t) (list-ref t 2))

(define (terminal-mutate t r)
  (if (eq? (terminal-type t) "colour")
      (list "terminal" "colour"
            (if (> r (rndf))
                (let ((v (random 256)))
                  (list v v v (rndf)))
                (terminal-colour t)))
      (list
       "terminal" "image"
       (transform-mutate (terminal-transform t) r)
       (if (> r (rndf))
           (choose pattern-images)
           (terminal-image t)))))

(define (list-clone l) (map (lambda (e) e) l))
(define (terminal-clone l) (list-clone l))

(define blend-modes
  ;; "safe" modes (browser consisitent)
  (list "source-over"
        "source-atop"
        "destination-over"
        "lighter"
        "xor"
        ))

(define (make-operator a b)
  (list "op" (choose blend-modes) a b))

(define (operator-clone o)
  (list "op" (list-ref o 1)
        (pattern-clone (operator-operand-a o))
        (pattern-clone (operator-operand-b o))))

(define (operator-type t) (list-ref t 1))
(define (operator-operand-a t) (list-ref t 2))
(define (operator-operand-b t) (list-ref t 3))

(define (operator-mutate t r)
  (list
   "op"
   (if (> r (rndf)) (choose blend-modes) (operator-type t))
   (value-mutate (operator-operand-a t) r)
   (value-mutate (operator-operand-b t) r)))

(define (make-random-pattern depth)
  (if (and (< depth (- pattern-complexity 2))
           (or (zero? depth) (< (random 10) 2)))
      (make-terminal)
      (make-operator (make-random-pattern (- depth 1))
                     (make-random-pattern (- depth 1)))))

(define (pattern-clone pattern)
  (if (eq? (program-type pattern) "terminal")
      (terminal-clone pattern)
      (operator-clone pattern)))

(define (random-subtree program)
  (define (_ p d)
    (cond
     ((zero? d) p)
     ((eq? (program-type p) "terminal") p)
     (else
      (if (< (rndf) 0.5)
          (_ (operator-operand-a p) (- d 1))
          (_ (operator-operand-b p) (- d 1))))))
  (_ program (random pattern-complexity)))


;(define (subtree-mutate pattern)
;  (let ((src (pattern-clone (random-subtree pattern)))
;        (dst (random-subtree pattern)))
;    (if (eq? (program-type dst) "terminal")

;; remove nodes below a given depth (replace them with random terminals)
(define (structure-prune pattern depth)
  (cond
   ((and (zero? depth)
         (eq? (program-type pattern) "op"))
    (make-terminal))
   ((eq? (program-type pattern) "terminal") pattern)
   (else
    (list "op" (operator-type pattern)
          (structure-prune (operator-operand-a pattern) (- depth 1))
          (structure-prune (operator-operand-b pattern) (- depth 1))))))

;; walk through the tree at random, occasionally replacing subtrees
;; with bits of the main tree
(define (structure-mutate pattern r)
  (define (_ e)
    (cond
     ((< (rndf) r) (pattern-clone (random-subtree pattern)))
     ((eq? (program-type e) "terminal") e)
     (else
      (list "op" (operator-type e)
            (_ (operator-operand-a e))
            (_ (operator-operand-b e))))))
  (_ pattern))

(define (value-mutate pattern r)
  (if (eq? (program-type pattern) "terminal")
      (terminal-mutate pattern r)
      (operator-mutate pattern r)))

;; mutate structure, then prune it before mutating the values
(define (pattern-mutate pattern r)
  (value-mutate (structure-prune (structure-mutate pattern r) pattern-complexity) r))

;;(structure-prune (structure-mutate pattern r) pattern-complexity)

(define (pattern-drawable program rotate c)
  (let ((tcanvas (document.createElement "canvas")))
    (set! tcanvas.width 128)
    (set! tcanvas.height 128)
    (let ((tctx (tcanvas.getContext "2d")))
      (when #f
            (tctx.translate 64 64)
            (tctx.rotate (* (rndf) 2 Math.PI))
            (tctx.translate -64 -64))
      (draw-pattern tctx program c)
      (set! tctx.globalCompositeOperation "destination-atop")
      (tctx.drawImage (find-image "pattern.png") 0 0)
      tcanvas)))


(define (draw-terminal ctx program c)
  (cond
   ((eq? (terminal-type program) "colour")
    (set! ctx.globalAlpha (list-ref (terminal-colour program) 3))
    (set! ctx.fillStyle (string-append
                         "rgb("
                         (list-ref (terminal-colour program) 0) ","
                         (list-ref (terminal-colour program) 1) ","
                         (list-ref (terminal-colour program) 2) ")"))
    (ctx.fillRect 0 0 128 128)
    (set! ctx.globalAlpha 1.0))
   (else
    (let ((image-name (terminal-image program)))
      (ctx.save)
      (set! ctx.fillStyle
            (ctx.createPattern
             (find-image image-name image-lib) "repeat"))

      (ctx.translate 64 64)
      (ctx.rotate (transform-rotate (terminal-transform program)))
      (ctx.translate -64 -64)

      (ctx.translate (transform-x (terminal-transform program))
                     (transform-y (terminal-transform program)))
      ;;        (ctx.scale (transform-scale (terminal-transform program))
      ;;                   (transform-scale (terminal-transform program)))
      (ctx.fillRect (- 0 (transform-x (terminal-transform program)) 256)
                    (- 0 (transform-y (terminal-transform program)) 256)
                    (* 256 2) (* 256 2))
      ;;        (ctx.scale (/ 1 (transform-scale (terminal-transform program)))
      ;;                   (/ 1 (transform-scale (terminal-transform program))))
      ;;(ctx.translate (- 0 (transform-x (terminal-transform program)))
      ;;               (- 0 (transform-y (terminal-transform program))))
      (ctx.restore)))))

(define (draw-op ctx program c)
  (let ((tcanvas (document.createElement "canvas")))
    (set! tcanvas.width 128)
    (set! tcanvas.height 128)
    (let ((tctx (tcanvas.getContext "2d")))
      (draw-pattern tctx (operator-operand-a program) c)
      (set! tctx.globalCompositeOperation (operator-type program))
      (draw-pattern tctx (operator-operand-b program) c)
      (set! tctx.globalCompositeOperation "source-over")
      (ctx.drawImage tcanvas 0 0))))

(define (draw-pattern ctx program c)
  (if (eq? (program-type program) "terminal")
      (draw-terminal ctx program c)
      (draw-op ctx program c)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; robo-nightjar drawing code

(define (dazzle-button text x y image fn)
    (button-modify-mouse-over
     (image-button
      text x y "jumpy" image fn)
     (lambda (c)
       c)))

(define (robo-nightjar-says ctx size text)
  (set! ctx.fillStyle "#000")
  (set! ctx.font (string-append "normal " size "pt 'Press Start 2P'"))
  (wrap-text ctx text 50 270 300 size+12)
  (set! ctx.font "normal 15pt 'Press Start 2P'")
  (set! ctx.fillStyle "#000"))

(define (robo-nightjar-bot-right ctx size text)
  (ctx.save)
  (ctx.scale -1 1)
  (ctx.restore)
  (set! ctx.fillStyle "#000")
  (set! ctx.font (string-append "normal " size "pt 'Press Start 2P'"))
  (wrap-text ctx text 450 280 280 size+12))

(define (robo-nightjar-bot-left ctx size text)
  (set! ctx.fillStyle "#000")
  (set! ctx.font (string-append "normal " size "pt 'Press Start 2P'"))
  (wrap-text ctx text -425 380 260 size+12)
  )

(define (robo-nightjar-says-bottom ctx size text)
  (set! ctx.fillStyle "#000")
  (set! ctx.font (string-append "normal " size "pt 'Press Start 2P'"))
  (wrap-text ctx text -10 670 360 size+8)
  (set! ctx.font "normal 15pt 'Press Start 2P'")
  (set! ctx.fillStyle "#000"))

(define (robo-nightjar-says-bottom2 ctx size text)
  (set! ctx.fillStyle "#000")
  (set! ctx.font (string-append "normal " size "pt 'Press Start 2P'"))
  (wrap-text ctx text -10 678 360 size+8)
  (set! ctx.font "normal 15pt 'Press Start 2P'")
  (set! ctx.fillStyle "#000"))


(define (robo-nightjar-says-bot-left ctx size text)
  (set! ctx.fillStyle "#000")
  (set! ctx.font (string-append "normal " size "pt 'Press Start 2P'"))
  (wrap-text ctx text -190 640 280 size+8)
  (set! ctx.font "normal 15pt 'Press Start 2P'")
  (set! ctx.fillStyle "#000"))
