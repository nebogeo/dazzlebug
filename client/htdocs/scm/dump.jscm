;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gp

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")
(load "scm/dazzle-common.jscm")

(define num-patterns-total 20)
(define num-patterns-from-population 20)
(define num-best-patterns 16)
(define selection-pop-size 256)
(define photo-time-allowed 10)

(define (make-individual id fitness ancestral-fitness generation parent drawable pattern pos phase)
  (list id fitness ancestral-fitness generation parent drawable pattern pos phase))

(define (individual-id i) (list-ref i 0))
(define (individual-fitness i) (list-ref i 1))
(define (individual-modify-fitness i v) (list-replace i 1 v))
(define (individual-ancestral-fitness i) (list-ref i 2))
(define (individual-generation i) (list-ref i 3))
(define (individual-parent i) (list-ref i 4))
(define (individual-drawable i) (list-ref i 5))
(define (individual-pattern i) (list-ref i 6))
(define (individual-pos i) (list-ref i 7))
(define (individual-phase i) (list-ref i 8))

(define world-w 200)
(define world-h 500)

(define safe-x 0.2)
(define safe-y 0.2)

(define (generate-image-pos)
  (list (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2)))))
        (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2)))))))

(define (generate-image-pos2)
  (list (+ 100 (random (- screen-width 200)))
        (+ 100 (random (- screen-height 200)))))

(define (make-pos game)
  (if (eq? game "flicker")
      (generate-image-pos2)
      (list (random world-w) (random world-h))))

(define (sqr x) (* x x))

(define (calc-mutation-rate)
  (* (sqr (* (rndf) 3.16227766)) 0.01)) ;; sqrt of 10 = 0-10%



(define pre-pop-count 0)
(define pre-pop-types 2)

(define (pre-pop-iter)
  (console.log (+ "wop" pre-pop-count " " pre-pop-types))

  (let ((p (cond
            ((eq? pre-pop-types 0) "CP")
            ((eq? pre-pop-types 1) "MV")
            (else "CF"))))
    (server-call
     "add"
     (list
      (list "phase" "init")
      (list "population" p)
      (list "replicate" 0)
      (list "pattern-id" 0)
      (list "player-id" 0)
      (list "fitness" 0)
      (list "parent" 0)
      (list "image" "init")
      (list "x-pos" 0)
      (list "y-pos" 0)
      (list "genotype" (JSON.stringify (make-random-pattern pattern-complexity))))))

  (set! pre-pop-count (+ pre-pop-count 1))
  (if (< pre-pop-count 128)
      (setTimeout pre-pop-iter 200)
      (begin
        (set! pre-pop-types (- pre-pop-types 1))
        (set! pre-pop-count 0)
        (when (> pre-pop-types -1)
              (setTimeout pre-pop-iter 200)))))

(define (pre-populate)
  (server-call
   "sample"
   (list
    (list "player-id" 0)
    (list "population" "CF")
    (list "replicate" 0)
    (list "count" 10)))

  (server-call
   "sample"
   (list
    (list "player-id" 0)
    (list "population" "MV")
    (list "replicate" 0)
    (list "count" 10)))

    (server-call
   "sample"
   (list
    (list "player-id" 0)
    (list "population" "CP")
    (list "replicate" 0)
    (list "count" 10)))

  (setTimeout pre-pop-iter 1000))


(define (make-population game samples mutate phase)
  (if (not (eq? phase "init"))
      (map
       (lambda (sample)
         (let ((program (if (zero? mutate)
                            (list-ref sample 0)
                            (pattern-mutate (list-ref sample 0)
                                        (calc-mutation-rate))))
               (ancestral-fitness (list-ref sample 1))
               (generation (list-ref sample 2))
               (id (list-ref sample 3)))
           (make-individual
            id
            0
            ancestral-fitness
            (+ generation 1)
            id
            (pattern-drawable program #t)
            program
            (make-pos game)
            phase)))
       (shuffle samples))

      (build-list
       num-patterns-total
       (lambda (i)
         ;; fixme
         (msg "making random pattern")
         (let ((program (make-random-pattern pattern-complexity)))
           (make-individual
            0 0 0 0 0 (pattern-drawable program #t)
            program
            (make-pos game)
            phase))))))

(define (make-pattern-grid game samples x-off)
  (index-map
   (lambda (i sample)
     (let ((program (car sample))
           (fitness (cadr sample))
           (id (list-ref sample 2)))
       (let ((x (modulo i 4)) (y (Math.floor (/ i 4))))
         (let ((xx (+ 80 (* x 90)))
               (yy (+ 150 (* y 120))))
           (list
            (make-individual
             id
             0 0 0 0
             (pattern-drawable program #f)
             program
             (list (+ x-off xx) yy))
            (string-append
             (time-to-seconds fitness)
             " : " (list-ref sample 3)
             " : " (list-ref sample 4)))))))
   samples))

(define (make-best-population game samplesa samplesb samplesc)
  (append
   (make-pattern-grid game samplesa 0)
   (make-pattern-grid game samplesb 400)
   (make-pattern-grid game samplesc 800)))

(define (draw-genome-node ctx program centrex centrey posx posy d apa start end n dist)
  (let ((childstart (+ start (* apa n))))
    (let ((childend (+ childstart apa)))
      (let ((tox (+ centrex (* (sin (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist)))
            (toy (+ centrey (* (cos (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist)))
            (tanx (* (sin (+ childstart (* (/ (- childend childstart) 2.0)))) -200))
            (tany (* (cos (+ childstart (* (/ (- childend childstart) 2.0)))) -200)))



        (set! ctx.strokeStyle "#000")
        (set! ctx.lineWidth 5)
        (ctx.beginPath)
        (ctx.moveTo posx posy)
        (ctx.bezierCurveTo
         (+ (- 0 tanx) posx) (+ (- 0 tany) posy)
         (+ tanx tox) (+ tany toy)
         tox toy)
        (ctx.stroke)
        (inner-draw-genome ctx program centrex centrey (+ d 1) childstart childend dist)
        ))))

(define (lerp a b t) (+ (* b t) (* a (- 1 t))))

(define (inner-draw-genome ctx program centrex centrey d start end dist)
  (let ((sc (lerp 0.4 0.2 (/ d 6))))
    (let ((posx (+ centrex (* (sin (+ start (* (/ (- end start) 2.0)))) d dist)))
          (posy (+ centrey (* (cos (+ start (* (/ (- end start) 2.0)))) d dist)))
          (size (* sc 512)))
      (set! ctx.strokeStyle "#000")
      (set! ctx.lineWidth 2)
;;      (ctx.strokeRect (- posx (/ size 2)) (- posy (/ size 2)) size size)
      (if (eq? (program-type program) "terminal")
          (let ((tcanvas (document.createElement "canvas")))
            (set! tcanvas.width size)
            (set! tcanvas.height size)
            (let ((tctx (tcanvas.getContext "2d")))
              (tctx.scale sc sc)
              (draw-terminal tctx program)

              (set! ctx.fillStyle "#777777")
              (ctx.fillRect (- posx (/ size 2)) (- posy (/ size 2)) size size)

              (ctx.drawImage tcanvas (- posx (/ size 2)) (- posy (/ size 2)))
              ))
          (let ((apa (/ (- end start) 2)))

            (draw-genome-node ctx (operator-operand-a program)
                              centrex centrey posx posy d apa start end 0 dist)
            (draw-genome-node ctx (operator-operand-b program)
                              centrex centrey posx posy d apa start end 1 dist)

            (set! ctx.fillStyle "#777777")
            (ctx.fillRect (- posx (/ size 2)) (- posy (/ size 2)) size size)

            (ctx.save)
            (ctx.translate (- posx (/ size 2))
                           (- posy (/ size 2)))
            (ctx.scale sc sc)


            (draw-op ctx program)
            (set! ctx.fillStyle "#000")
            (set! ctx.font "normal 50pt 'Press Start 2P'")
            (fill-centre-text ctx (operator-type program) 256
                              (if (eq? d 0) 600 600))
            (ctx.restore))))))

(define (render-pattern-genome ctx pattern centrex centrey)
  (let ((canvas (document.createElement "canvas")))
    (set! canvas.width screen-width)
    (set! canvas.height screen-height)
    (let ((ctx (canvas.getContext "2d")))

      (ctx.beginPath)
      (set! ctx.lineWidth 5)
      (ctx.arc centrex centrey 1600 0 (* 2 Math.PI) #f)
      (set! ctx.strokeStyle "#000")
      (ctx.stroke)

      (inner-draw-genome ctx pattern centrex centrey 0 0 (* 2 3.141) 250)
      (set! ctx.fillStyle "#fff"))
    canvas))


(define (render-pattern-family-tree ancestors)
  (map
   (lambda (anc)
     (pattern-drawable (JSON.parse (list-ref (car anc) 1)) #f))
   ancestors))

(define (draw-pattern-family-tree ctx ancestors patterns)

  (let ((w (/ (- screen-width 400) (length ancestors))))
    (set! ctx.fillStyle "#000")
    (set! ctx.font "normal 15pt 'Press Start 2P'")

    (index-for-each
     (lambda (i anc)
       (let ((x (+ (* i w) 100)))

         (ctx.drawImage (list-ref patterns i) x 250)

         (fill-centre-text ctx (+ "" (car (car anc)) " " (list-ref (car anc) 2)) x 200)
         (fill-centre-text ctx (+ "" (time-to-seconds (list-ref (car anc) 3))) x 500)

         ;;(index-for-each
         ;; (lambda (i child)
         ;;   (fill-centre-text ctx (+ "" (car child) " " (list-ref child 2)) x (+ 400 (* i 20))))
         ;; (cadr anc))
         ))
     ancestors))

  (set! ctx.fillStyle "#fff"))


(define (draw-bars x)
  (when (not (zero? x))
        (set! ctx.strokeStyle (rgb-to-hex (modulo (* x 10) 255)
                                          (modulo (* x 30) 255)
                                          0))
        (set! ctx.lineWidth 2)
        (ctx.beginPath)
        (ctx.moveTo (* x 100) 0)
        (ctx.lineTo (* x 100) 20000)
        (ctx.stroke)
        (draw-bars (- x 1))))

(define (draw-barsv y)
  (when (not (zero? y))
        (set! ctx.strokeStyle (rgb-to-hex (modulo (* y 10) 255)
                                          (modulo (* y 30) 255)
                                          0))
        (set! ctx.lineWidth 2)
        (ctx.beginPath)
        (ctx.moveTo 0 (* y 100))
        (ctx.lineTo 20000 (* y 100))
        (ctx.stroke)
        (draw-barsv (- y 1))))

(define (draw-grid)
  (set! ctx.fillStyle "#000")
  (draw-bars 200)
  (draw-barsv 200))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define pop-type (get-url-parameter "speed"))
(define rep (get-url-parameter "rep"))

(define red "#fe0000")
(define yellow "#f3fe00")
(define blue "#000efe")
(define purple "#ec00fe")
(define cyan "#00fefa")
(define green "#00fe00")

(define (nightjar-intro c)
  (server-call-mutate
   "get-every"
   (list (list "id" 0))
   (lambda (c data)
     (nightjar-viz (JSON.parse data) c)))
  
;  (server-call-mutate
;   "get-decendents"
;   (list
;    (list "pattern-id" 501)) ; 125 23
;   (lambda (c data)
;     (nightjar-viz-decendants data c)))

; (server-call-mutate
;   "get-single"
;   (list
;    (list "pattern-id" 37227)) ;; 39416
;   (lambda (c data)
;     (nightjar-viz-single (JSON.parse data) green c)))

  ;; (server-call-mutate
  ;;  "get-single"
  ;;  (list
  ;;   (list "pattern-id" 25147))
  ;;  (lambda (c data)
  ;;    (nightjar-viz-genome (JSON.parse data) c)))



  (game-modify-update
   (lambda (t c)
     c)
   (game-modify-render
    (lambda (ctx) 0)
    (game-modify-buttons
     (list
      (image-button
       ""
       800 430
       "rotate" (find-image "transp.png")
       (lambda (c)
         c))
      )
     c)))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define done 0)

(define (nightjar-viz-genome pattern c)
  (let ((program (JSON.parse (list-ref pattern 2))))
    (game-modify-render
     (lambda (ctx)
       (when (zero? done)
             (msg program)
             (ctx.clearRect 0 0 screen-width screen-height)
             (ctx.drawImage (render-pattern-genome ctx program (/ screen-width 2) (/ screen-height 2)) 0 0)


             (set! ctx.fillStyle "#000")
             (set! ctx.font "normal 45pt 'Press Start 2P'")

             (let ((pop
                    (cond
                     ((eq? (list-ref pattern 5) "CP") "Fiery-necked nightjar")
                     ((eq? (list-ref pattern 5) "CF") "Mozambique nightjar")
                     ((eq? (list-ref pattern 5) "MV") "Pennant-winged nightjar")
                     (else "none!")))
                   (fitness (+ "" (/ (list-ref pattern 4) 1000))))

               (fill-centre-text ctx (string-append
                              "Generated pattern program for pattern ID: " (list-ref pattern 0) " | "
                              "Nest site: " pop  " | "
                              "Generation: " (list-ref pattern 3)
                              )
                             (/ screen-width 2) 130))


             (set! done 1)))

     (game-modify-buttons
      (list) c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define generationx 0)
(define pos 0)
(define patterns ())
(define pop-drawables ())
(define wait 0)
(define connections ())

(define (make-pop-drawable data)
  (let ((tcanvas (document.createElement "canvas")))
    (set! tcanvas.width 128)
    (set! tcanvas.height 128)
    (let ((tctx (tcanvas.getContext "2d")))
      
      (index-for-each
       (lambda (i pattern)
         ;;(set! patterns (cons (list (list-ref pattern 0) (list-ref pattern 2)
         ;;                     (* i 52) (+ 40 (* generationx 180))) patterns))
         (let ((d (pattern-drawable (JSON.parse (list-ref pattern 1)) #f))
	       (fit (+ "" (/ (list-ref pattern 3) 1000))))
           (tctx.drawImage d 0 0 128 128)

	   (msg (list-ref pattern 0))
	   (server-call
	    "save-render" 
	    (list
	     (list "pattern-id" (list-ref pattern 0))
	     (list "data" (tcanvas.toDataURL "image/png"))))

	   ;; save to db

           ))
       data)
      tcanvas)))

(define (pattern-id pattern) (list-ref pattern 0))
(define (pattern-parent pattern) (list-ref pattern 1))
(define (pattern-x pattern) (list-ref pattern 2))
(define (pattern-y pattern) (list-ref pattern 3))

(define (find-pattern patterns id)
  (cond
   ((null? patterns) #f)
   ((eq? (pattern-id (car patterns)) id) (car patterns))
   (else (find-pattern (cdr patterns) id))))


(define (connection fx fy tx ty) (list fx fy tx ty))

(define (make-connections patterns)
  (set! connections
        (foldl
         (lambda (pattern r)
           (let ((parent (find-pattern patterns (pattern-parent pattern))))
             (msg (+ (pattern-id pattern) "->" (pattern-parent pattern)))
             (if parent
                 (cons (dbg (connection
                             (pattern-x pattern) (pattern-y pattern)
                             (pattern-x parent) (pattern-y parent))) r)
                 r)
             ))
         ()
         patterns)))

(define (draw-connections ctx)
  (set! ctx.strokeStyle "#000")
  (set! ctx.lineWidth 2)
  (for-each
   (lambda (connection)
     (ctx.beginPath)
     (ctx.moveTo (+ (list-ref connection 0) 40) (+ (list-ref connection 1) 50))
     (ctx.lineTo (+ (list-ref connection 2) 40) (+ (list-ref connection 3) 50))
     (ctx.stroke))
   connections))

(define i 14940)

(define (nightjar-viz data c)
  (game-modify-update
   (lambda (t c)
     (when (zero? wait)
           (ctx.drawImage (make-pop-drawable data) 0 0)
           (set! i (+ i 1))
	   (set! wait 1)

	   (server-call-mutate
	    "get-every"
	    (list (list "id" i))
	    (lambda (c data)
	      (set! wait 0)
	      (nightjar-viz (JSON.parse data) c)))   
	   )
     c)
   (game-modify-render
    (lambda (ctx)
;;      (draw-connections ctx)
;      (draw-grid)
      (index-for-each
       (lambda (i d)
         (ctx.drawImage d 0 (* i 180)))
       pop-drawables)
      )
    c)))





(define (nightjar-viz-single data col c)
  (let ((pattern (pattern-drawable (JSON.parse (list-ref data 2)) #t))
        (fn (list-ref data 10)))
    (let ((image-name (string-append "/bg-print" (fn.substring 3 (- (length fn) 6)) ".jpg")))
      (load-image-mutate
       (lambda (c)
          (game-modify-render
           (lambda (ctx)
             (when (zero? done)
                   (ctx.clearRect 0 0 screen-width screen-height)
                   (set! ctx.fillStyle col)
                   (set! ctx.globalAlpha 0.2)
                   (ctx.fillRect 0 0 screen-width screen-height)
                   (set! ctx.globalAlpha 1)
                   (ctx.drawImage (find-image image-name) 200 200)
                   (ctx.drawImage pattern (+ (+ (* (list-ref data 7) 4) 200) 0)
                                  (- (+ (* (list-ref data 8) 4) 200) 500))
                   (set! ctx.fillStyle "#000")
                   (set! ctx.font "normal 45pt 'Press Start 2P'")

                   (let ((pop
                          (cond
                           ((eq? (list-ref data 5) "CP") "Fiery-necked nightjar")
                           ((eq? (list-ref data 5) "CF") "Mozambique nightjar")
                           ((eq? (list-ref data 5) "MV") "Pennant-winged nightjar")
                           (else "none!")))
                         (fitness (+ "" (/ (list-ref data 4) 1000))))


                     (ctx.fillText (string-append
                                    "Pattern ID: " (list-ref data 0) " | "
                                    "Nest site: " pop  " | "
                                    "Num players: " (list-ref data 9) " | "
                                    "Generation: " (list-ref data 3) " | "
                                    "Av seconds to find: " (fitness.substring 0 5)
                                    )
                                   200 130))
                   (set! done 1))
             )
           c))
       image-name)
      ))
  (game-modify-buttons
   (list) c))

  ;(let ((fullpath (bg-full-path i)))
  ;  (load-image-mutate
  ;   (lambda (c)
  ;     (game-modify-data
  ;      (lambda (d)

;          (game-modify-render
;           (lambda (ctx)
             ;;      (draw-connections ctx)
                                        ;      (draw-grid)
;             )
 ;          (game-modify-buttons
  ;          (list

   ;          )


    ;    c))
     ;fullpath)))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define y 10)
(define patterns ())
(define lines ())
(define (max a b) (if (< a b) b a))

;; list per generation
;; find parent, seach previous gen
;; repel over same generation
;; points relative to parent

(define (build-decendents x w y data)
  (msg "hello")
  (cond
   ((null? data) ())
   (else
;    (let ((pattern (car data)))
      ;(let ((prog (JSON.parse (list-ref pattern 2))))
      ;  (let ((d (pattern-drawable prog #f)))
      ;    (set! patterns
      ;          (cons
      ;           (list x y d)
                                        ;           patterns)))))

     (let ((w (max 145 w)))
       (let ((start (- x (/ w 2)))
             (seg (/ w (length (cadr data)))))
         (index-for-each
          (lambda (i d)
            (set! lines (cons (list x y
                                    (+ start (* seg i) (/ seg 2))
                                    (+ y 150)) lines))
            (build-decendents (+ start (* seg i) (/ seg 2)) seg (+ y 150) d))
          (cadr data)))))))



(define (build-structure x y w data)
  (cond
   ((null? data) ())
   (else
    (let ((start 0)
          (seg (/ w (length (cadr data)))))
      (index-map
       (lambda (i d)
         (let ((seg (if (< seg 2) 2 seg)))
           (let ((xx (+ x (- (* seg i) (/ seg 2))))
                 (yy (+ y 180))
                 (prog (JSON.parse (list-ref (car d) 2))))
             (let ((draw (pattern-drawable-id prog (list-ref (car d) 0) #f)))
               (list
                (list xx yy)
                (build-structure xx yy seg d)
                draw
                seg
                (list-ref (car d) 0)
                (list-ref (car d) 1) ;; parent
                )))))
       (cadr data))))))

(define (get-generation-positions gen struct)
  (foldl
   (lambda (d r)
     (let ((xx (list-ref (car d) 0))
           (yy (list-ref (car d) 1)))
       (cond
        ((zero? gen) (cons (list xx yy (list-ref d 5)) r))
        ((not (null? (cadr d)))
         (append r (get-generation-positions (- gen 1) (cadr d))))
        (else r))))
   ()
   struct))

(define generations ())

(define (build-generations struct)
  (build-list
   100 (lambda (i) (get-generation-positions i struct))))

(define (relax-structure parent-x parent-y gen struct)
  ;; get generation individuals
  (let ((generation (list-ref generations gen)))
    (map
     (lambda (d)
       (let ((xx (list-ref (car d) 0))
             (yy (list-ref (car d) 1))
             (gap (list-ref d 3)))
         ;; repel from individuals using global pos
         (let ((gap (if (< gap 200) 200 gap))
               (repel (foldl
                       (lambda (g r)
                         (if (not (and (eq? (car g) xx) (eq? (cadr g) yy)))
                             (let ((dist (- xx (car g))))
                               (if (< (Math.abs dist)
                                      (if (eq? (list-ref g 2) ;; parent
                                               (list-ref d 5))
                                          150
                                          400))
                                   (+ (if (< dist 0)
                                          (* (/ 1 (Math.abs dist)) -100)
                                          (* (/ 1 (Math.abs dist)) 100)) r)
                                   r))
                             r))
                       0
                       generation))
               (attract (if (> (Math.abs (- parent-x xx)) gap)
                            (* (- parent-x xx) 0.005) 0)))
           (list
            (list
             (if (> (Math.abs (- parent-x xx)) (* gap 2.1))
                 (+ parent-x (* (- (rndf) 0.5) 2))
                 (+ (list-ref (car d) 0)
                    (if (> (Math.abs repel) 5)
                        (if (> repel 0) 5 -5)
                        repel)
                    attract))
             (list-ref (car d) 1))
            (relax-structure xx yy (+ gen 1) (list-ref d 1))
            (list-ref d 2)
            (list-ref d 3)
            (list-ref d 4)
            (list-ref d 5)
            ))))
     struct)))

(define (draw-structure x y struct)
  (set! ctx.strokeStyle "#000")
  (set! ctx.fillStyle "#000")
  (set! ctx.lineWidth 5)
  (for-each
   (lambda (d)
     (let ((xx (list-ref (car d) 0))
           (yy (list-ref (car d) 1)))
       (ctx.beginPath)
       (ctx.moveTo x y)
       (ctx.bezierCurveTo x (+ y 100) xx (- yy 100) xx yy)
       (ctx.stroke)

       (when (not (null? (cadr d)))
             (draw-structure xx yy (cadr d)))))
   struct))

(define (draw-structure-patterns x y struct)
  (for-each
   (lambda (d)
     (let ((xx (list-ref (car d) 0))
           (yy (list-ref (car d) 1)))
       (ctx.drawImage (list-ref d 2) (- xx 64) (- yy 64))
       ;;(fill-centre-text ctx (list-ref d 4) xx (- yy 64))
       (when (not (null? (cadr d)))
             (draw-structure-patterns xx yy (cadr d)))))
   struct))


(define pattern-root ())



(define (nightjar-viz-decendants data c)
  (set! ctx.font "normal 12pt 'Press Start 2P'")
  (set! structure (build-structure (- (/ screen-width 2) 3000) 80 (* screen-width 0.75) (JSON.parse data)))

  (let ((d (car (JSON.parse data))))
    (set! pattern-root (let ((prog (JSON.parse (list-ref d 2))))
                     (let ((draw (pattern-drawable prog #f)))
                       (list
                        (list-ref d 0)
                        draw)))))

  (game-modify-update
   (lambda (t c)
     (when (zero? done)
           (set! generations (build-generations structure))
           (set! structure (relax-structure (/ screen-width 2) 80 0 structure)))
     c)
   (game-modify-render
    (lambda (ctx)

      (when (zero? done)
            (ctx.clearRect 0 0 screen-width screen-height)

      (draw-structure (/ screen-width 2) 80 structure)
      (draw-structure-patterns (/ screen-width 2) 80 structure)
      (ctx.drawImage (list-ref pattern-root 1) (- (/ screen-width 2) 64) (- 80 64))
      (fill-centre-text ctx (list-ref pattern-root 0) (/ screen-width 2) (- 80 64))
)
      )
    (game-modify-buttons
     (list
      (image-button
       ""
       10 10
       "rotate" (find-image "yes.png")
       (lambda (c)
         (set! done 1)
         (game-modify-buttons
          (list) c)))

      )
     c))))



(load-images!
 (append
  (list
   "button.png"
   "mute-on.png"
   "mute-off.png"
   "pattern.png"
   "foam.png"
   "transp.png"
   )
  pattern-images)
 (lambda ()
   (start-game canvas ctx)))



;(set! screen-width 15300)
;(set! screen-height 6900)

(set! screen-width 300)
(set! screen-height 300)
(set! clear-screen 0)
